{"ast":null,"code":"import _classCallCheck from \"/Users/matthewdizon/Desktop/Code/WebDev/Codename/codename_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/matthewdizon/Desktop/Code/WebDev/Codename/codename_frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/matthewdizon/Desktop/Code/WebDev/Codename/codename_frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/matthewdizon/Desktop/Code/WebDev/Codename/codename_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/matthewdizon/Desktop/Code/WebDev/Codename/codename_frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/matthewdizon/Desktop/Code/WebDev/Codename/codename_frontend/src/container/GameBoard.js\";\nimport React from 'react';\nimport Map from '../component/GameMap';\nimport CardCollection from './CardContainer';\n\nvar GameBoard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GameBoard, _React$Component);\n\n  function GameBoard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GameBoard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GameBoard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      words: [],\n      loading: true,\n      bgColor: ['red', 'red', 'red', 'red', 'red', 'red', 'red', 'red', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'blue', 'green', 'green', 'green', 'green', 'green', 'green', 'green', 'green', 'black'],\n      newCollection: [],\n      shuffledWords: []\n    };\n\n    _this.generateShuffledCards = function () {\n      var i = 0;\n      var wordArr = [];\n\n      _this.state.words.sort(function () {\n        return 0.5 - Math.random();\n      }).map(function (word) {\n        while (i < 25) {\n          i++;\n          return wordArr.push(word);\n        }\n      }); //array of cards\n      //need to associate card with color\n\n\n      return wordArr;\n    };\n\n    _this.generateMap = function () {\n      var shuffle = require('shuffle-array');\n\n      shuffle(_this.state.bgColor);\n    };\n\n    return _this;\n  }\n\n  _createClass(GameBoard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(\"https://codename-backend.herokuapp.com/cards/index\").then(function (response) {\n        return response.json();\n      }).then(function (words) {\n        return _this2.setState({\n          words: words,\n          loading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.generateMap();\n      console.log(this.state.bgColor);\n      this.state.shuffledWords = this.generateShuffledCards(); //need to setstate properly however newCollection is the randomized color array\n      // in the state\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Map, {\n        colors: this.state.bgColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(CardCollection, {\n        cards: this.state.shuffledWords,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GameBoard;\n}(React.Component);\n\nexport default GameBoard;","map":{"version":3,"sources":["/Users/matthewdizon/Desktop/Code/WebDev/Codename/codename_frontend/src/container/GameBoard.js"],"names":["React","Map","CardCollection","GameBoard","state","words","loading","bgColor","newCollection","shuffledWords","generateShuffledCards","i","wordArr","sort","Math","random","map","word","push","generateMap","shuffle","require","fetch","then","response","json","setState","console","log","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;;IAGMC,S;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,OAAO,EAAE,IAFL;AAGJC,MAAAA,OAAO,EAAE,CACL,KADK,EACC,KADD,EACO,KADP,EACa,KADb,EACmB,KADnB,EACyB,KADzB,EAC+B,KAD/B,EACqC,KADrC,EAEL,MAFK,EAEE,MAFF,EAES,MAFT,EAEgB,MAFhB,EAEuB,MAFvB,EAE8B,MAF9B,EAEqC,MAFrC,EAE4C,MAF5C,EAGL,OAHK,EAGG,OAHH,EAGW,OAHX,EAGmB,OAHnB,EAG2B,OAH3B,EAGmC,OAHnC,EAG2C,OAH3C,EAGmD,OAHnD,EAIL,OAJK,CAHL;AASJC,MAAAA,aAAa,EAAE,EATX;AAUJC,MAAAA,aAAa,EAAE;AAVX,K;;UAoBRC,qB,GAAuB,YAAK;AACxB,UAAIC,CAAC,GAAG,CAAR;AACA,UAAIC,OAAO,GAAG,EAAd;;AACA,YAAKR,KAAL,CAAWC,KAAX,CAAiBQ,IAAjB,CAAsB;AAAA,eAAM,MAAMC,IAAI,CAACC,MAAL,EAAZ;AAAA,OAAtB,EAAiDC,GAAjD,CAAqD,UAAAC,IAAI,EAAI;AACzD,eAAON,CAAC,GAAG,EAAX,EAAc;AACVA,UAAAA,CAAC;AACD,iBACIC,OAAO,CAACM,IAAR,CAAaD,IAAb,CADJ;AAGH;AAEJ,OARD,EAHwB,CAYxB;AACA;;;AACA,aAAOL,OAAP;AACH,K;;UACDO,W,GAAa,YAAI;AACb,UAAIC,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AACAD,MAAAA,OAAO,CAAC,MAAKhB,KAAL,CAAWG,OAAZ,CAAP;AAEH,K;;;;;;;wCA1BmB;AAAA;;AACpBe,MAAAA,KAAK,CAAC,oDAAD,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OADhB,EAEGF,IAFH,CAEQ,UAAAlB,KAAK;AAAA,eAAI,MAAI,CAACqB,QAAL,CAAc;AAACrB,UAAAA,KAAK,EAALA,KAAD;AAAOC,UAAAA,OAAO,EAAC;AAAf,SAAd,CAAJ;AAAA,OAFb;AAGC;;;6BA0BO;AACJ,WAAKa,WAAL;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxB,KAAL,CAAWG,OAAvB;AACA,WAAKH,KAAL,CAAWK,aAAX,GAA2B,KAAKC,qBAAL,EAA3B,CAHI,CAIJ;AACA;;AAEH,aACI;AAAK,QAAA,SAAS,EAAG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,GAAD;AAAK,QAAA,MAAM,EAAI,KAAKN,KAAL,CAAWG,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAEA,oBAAC,cAAD;AAAgB,QAAA,KAAK,EAAI,KAAKH,KAAL,CAAWK,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,CADJ;AASF;;;;EA9DqBT,KAAK,CAAC6B,S;;AAgE9B,eAAe1B,SAAf","sourcesContent":["import React from 'react'\nimport Map from '../component/GameMap'\nimport CardCollection from './CardContainer'\n\n\nclass GameBoard extends React.Component{\n\n    state = {\n        words: [],\n        loading: true,\n        bgColor: [\n            'red','red','red','red','red','red','red','red',\n            'blue','blue','blue','blue','blue','blue','blue','blue',\n            'green','green','green','green','green','green','green','green',\n            'black'\n        ],\n        newCollection: [],\n        shuffledWords: []\n\n    }\n\n    componentDidMount() {\n    fetch(\"https://codename-backend.herokuapp.com/cards/index\")\n      .then(response => response.json())\n      .then(words => this.setState({words,loading:false}))\n    }\n\n    generateShuffledCards =() =>{\n        let i = 0\n        let wordArr = []\n        this.state.words.sort(() => 0.5 - Math.random()).map(word => {\n            while (i < 25){\n                i++\n                return (\n                    wordArr.push(word)\n                )\n            }\n\n        })\n        //array of cards\n        //need to associate card with color\n        return wordArr\n    }\n    generateMap =()=>{\n        let shuffle = require('shuffle-array')\n        shuffle(this.state.bgColor)\n\n    }\n\n\n\n    render(){\n        this.generateMap()\n        console.log(this.state.bgColor)\n        this.state.shuffledWords = this.generateShuffledCards()\n        //need to setstate properly however newCollection is the randomized color array\n        // in the state\n\n     return (\n         <div className = \"container\">\n         <Map colors = {this.state.bgColor}/>\n         <CardCollection cards = {this.state.shuffledWords}  />\n         </div>\n     )\n\n\n\n  }\n}\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}